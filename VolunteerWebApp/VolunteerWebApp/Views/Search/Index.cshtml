@model VolunteerWebApp.Models.SearchViewModel
@{
    ViewBag.Title = "Hub.Search";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>

    /* Always set the map height explicitly to define the size of the div
    * element that contains the map. */
    #map {
        height: 500px;
    }
</style>
<div class="Row">
    <div class="Column" style="width:250px">
        <h1 class="titleStyle"><b>Hub Opportunity Search</b></h1>
    </div>

    @using (Html.BeginForm("FilterSearch", "Search", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
            {
        <div class="greyBox">
            <div class="Column" style="width:450px; padding-left:20px">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary("", new { @class = "text-danger" })
                <div class="form-group">
                    <h4><b>Filter By Keyword</b></h4>
                    <div class="col-md-10">
                        @Html.TextBoxFor(m => m.KeywordFilter, new { @class = "form-control blackBorder" })
                    </div>
                </div>
                <div class="form-group">
                    <h4><b>Filter By Category</b></h4>
                    <div class="col-md-10">
                        @Html.DropDownListFor(m => m.CategoryFilter, new SelectList(Model.CategoryList, "ID", "Category"), "", new { @class = "form-control blackBorder" })
                    </div>
                </div>
            </div>
            <div class="Column" style="width:450px; padding-top:10px">
                <div class="form-group">
                    <h4><b>Filter By Organization</b></h4>
                    <div class="col-md-10">
                        @Html.DropDownListFor(m => m.OrganizationFilter, new SelectList(Model.OrgNames), "", new { @class = "form-control blackBorder" })
                    </div>
                </div>
                <div class="form-group">
                    <h4><b>Filter By Distance</b></h4>
                    <div class="col-md-10">
                        @Html.DropDownListFor(m => m.DistanceFilter, new SelectList(Model.Distances, "ID", "Distance"), "", new { @class = "form-control blackBorder" })
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" class="yellowButton" value="Filter Search" style="float:right; margin-right:150px" />
                    </div>
                </div>
            </div>
        </div>
    }
</div>





<div id="map" class="blackBorder" style="border-radius: 5px"></div>

<script>
    var map;
    var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    var labelIndex = 0;
    var infoWindow = null;


    function initMap() {
        map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: 43.0389 , lng: -87.9065 },
            zoom: 11
        });

        @foreach (var org in Model.Organizations)
        {
           @:var contentString = "<h3><b>"+'@org.OrganizationName'+"</b></h3>"+'@Html.ActionLink("MoreInfo","PartialProfile","Organization", new {id=org.Id},  null)';
                           @:addOrg(@org.GeoLocation[0], @org.GeoLocation[1], '@org.OrganizationName', contentString, '@org.LogoImgSrc' )
                        }



        @foreach (var item in Model.cleanOpps)
        {
           @:var contentString = "<h3 id='firstHeading' class='firstHeading'><b>" + '@item.Title' + "</b></h3><h4><b>"+'@item.OrganizationHostName'+"</b></h4>"+'@item.AboutShort'+"<br><br>"+'@Html.ActionLink("MoreInfo","FullView","Organization", new {id=item.ID},  null)';
                                    @:addPin(@item.GeoLocation[0], @item.GeoLocation[1], '@item.Title', contentString, '@item.LogoSrc' )
                                                        }
        infowindow = new google.maps.InfoWindow({
            content: "loading..."
        });
    }


    function addOrg(latitude, longitude, Title, Info, Image) {
        var marker = new google.maps.Marker({
            position: { lat: latitude, lng: longitude },
            map: map,
            icon : Image,
            title : Title,
            html : Info
        });

        var content = "loading content";

        google.maps.event.addListener(marker, "click", function () {
            infowindow.setContent(this.html);
            infowindow.open(map, this);
        });
    }
    var latlngbounds = new google.maps.LatLngBounds();
    for (var i = 0; i < latlng.length; i++) {
        latlngbounds.extend(latlng[i]);
    }
    map.fitBounds(latlngbounds);


    function addPin(latitude, longitude, Title, Info, Image) {
        var marker = new google.maps.Marker({
            position: { lat: latitude, lng: longitude },
            label: labels[labelIndex++ % labels.length],
            map: map,
            animation: google.maps.Animation.DROP,
            title : Title,
            html : Info
        });
    

        var content = "loading content";

        google.maps.event.addListener(marker, "click", function () {
            infowindow.setContent(this.html);
            infowindow.open(map, this);
        });
        marker.addListener('click', toggleBounce);
    }
    function toggleBounce() {
        if (marker.getAnimation() !== null) {
            marker.setAnimation(null);
        } else {
            marker.setAnimation(google.maps.Animation.BOUNCE);
        }
    }


</script>
<script async defer
        src="https://maps.googleapis.com/maps/api/js?key=AIzaSyABln82MFoySBkjQPoJjeVYgeoK_R_RKPE&callback=initMap">
</script>
